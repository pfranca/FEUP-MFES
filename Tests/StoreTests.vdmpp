class StoreTests is subclass of Tests

instance variables
  pedro : User := new User("Pedro",<Owner>,"pedro@gmail.com",925302024);
 	quinhas : User := new User("Quinhas",<Owner>,"quinhas@gmail.com",915302067);
  joana : User := new User("Joana",<Common>,"joana@gmail.com",915302024);
  miguel : User := new User("Miguel",<Common>,"miguel@gmail.com",965302024);
  iphone : Product := new Product("Iphone",1000);
  ipad : Product := new Product("Ipad",500);
  review1: Review := new Review(pedro,"This is a review1",5,mk_Review`Date(2019, 01, 03));
  review2: Review := new Review(pedro,"This is a review2",3,mk_Review`Date(2019, 01, 03));
  
operations

private testStoreParams: () ==> ()
			testStoreParams() ==
			(	--creates an empty store and verifies the parameters,if has no products and at least 1 manager = owner
			 
				dcl s : Store := new Store(pedro,"Apple");
			
				
				assert(s.getStoreName() = "Apple");
				assert(s.getOwner() = "Pedro");
				assert(s.getProducts() = {});
			  assert(s.getManagers() = {pedro});
		
				
);

private testStoreProducts: () ==> ()
			testStoreProducts() ==
			(	--creates an empty store and adds and removes two products and checks if it was done correctly
			 
				dcl s : Store := new Store(pedro,"Apple");
				
				assert(s.getProducts() = {});
				s.addProduct(iphone,pedro);
				assert(s.getProducts() = {iphone});
				s.addProduct(ipad,pedro);
				assert(s.getProducts() = {iphone,ipad});
			  s.removeProduct(ipad,pedro);
			  assert(s.getProducts() = {iphone});
			  s.removeProduct(iphone,pedro);
			  assert(s.getProducts() = {});
			  
		
				
);

private testStoreManagers: () ==> ()
			testStoreManagers() ==
			(	--creates an empty store,adds and removes two managers,checks if it was done correctly and if new managers can add products.
			 
				dcl s : Store := new Store(pedro,"Apple");
				
			
				assert(s.getManagers() = {pedro});
				s.addManager(joana,pedro);
				assert(s.getManagers() = {pedro,joana});
				s.addManager(miguel,pedro);
				assert(s.getManagers() = {pedro,joana,miguel});
			  s.removeManager(miguel,pedro);
			  assert(s.getManagers() = {pedro,joana});
			  assert(s.getProducts() = {});
			  s.addProduct(iphone,joana);
			  assert(s.getProducts() = {iphone});
			 
	);
	
	
private testBestProductStore: () ==> ()
			testBestProductStore() ==
			(	--creates an empty store,adds two products,a review(with a rating) to each product, and checks what is the best product(better rating) in the store.
			 
				dcl s : Store := new Store(pedro,"Apple");
				
				s.addProduct(iphone,pedro);
				s.addProduct(ipad,pedro);
				assert(s.getProducts() = {iphone,ipad});
				iphone.addReview(review1);
				ipad.addReview(review2);
				assert(s.getBestProduct() = iphone);
				
			 
	);
	
private testStoreEquality: () ==> ()
			testStoreEquality() ==
			(	--creates a2 stores with the same name and sees if their equal
			 
				dcl s1 : Store := new Store(pedro,"Apple");
				dcl s2 : Store := new Store(quinhas,"Apple");
			
				assert(Store`equals(s1,s2));
		
				
);
	


--runs the above tests
	public runTests: () ==> ()
		runTests() ==
		(
			testStoreParams();
			testStoreProducts();
			testStoreManagers();
			testBestProductStore();
			testStoreEquality();
			
);

functions
-- TODO Define functiones here

end StoreTests