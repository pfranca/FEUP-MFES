class ProductTests is subclass of Tests

instance variables
-- TODO Define instance variables here
  shopadvizor : ShopAdvizor := new ShopAdvizor();
  pedro : User := new User("Pedro",<Owner>,"pedro@gmail.com",925302024);
  joana : User := new User("Joana",<Common>,"joana@gmail.com",915302024);
  miguel : User := new User("Miguel",<Common>,"miguel@gmail.com",965302024);
 -- iphone : Product := new Product("Iphone",1000);
 -- ipad : Product := new Product("Ipad",500);
  review1: Review := new Review(pedro,"This is a review1",5,mk_Review`Date(2019, 01, 03));
  review2: Review := new Review(pedro,"This is a review2",3,mk_Review`Date(2019, 01, 03));
   
operations
-- TODO Define operations here
    private testProductParams: () ==> ()
      testProductParams() ==
     	 (  --creates a product and verifies the parameters.
   				 dcl iphone : Product := new Product("Iphone",1000);
   				 
   				 assert(iphone.getProductName() = "Iphone");
   				 assert(iphone.getProductPrice() = 1000);
   				
               
      );
      
     private testProductReview: () ==> ()
      testProductReview() ==
     	 (   --creates a product, add two reviews to it and checks if it was done correctly. 
     	 
   				 dcl iphone : Product := new Product("Iphone",1000);
   				 
   				 assert(iphone.getReviews() = {});
   				 iphone.addReview(review1);
   				 iphone.addReview(review2);
   				 assert(iphone.getReviews() = {review1,review2});
   				 
               
      );
      
      
     private testProductRating: () ==> ()
      testProductRating() ==
     	 (   --creates a product, add two reviews to it and checks the product rating. 
     	 
   				 dcl iphone : Product := new Product("Iphone",1000);
   				 
   				 assert(iphone.getRating() = 0);
   				 iphone.addReview(review1);
   				 iphone.addReview(review2);
   				 assert(iphone.getRating() = 4);
   				 
               
      );
      
      private testProductEquality: () ==> ()
      testProductEquality() ==
     	 (   --creates 2 products with the same name and checks equality
     	 
   				 dcl p1 : Product := new Product("Iphone",111);
   				 dcl p2 : Product := new Product("Iphone",222);
   				 
   				 assert(Product`equals(p1,p2));
         
      );
      
  public runTests: () ==> ()
		runTests() ==
		(
			testProductParams();
			testProductReview();
			testProductRating();
			testProductEquality();
			
);

end ProductTests