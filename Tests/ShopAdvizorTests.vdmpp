class ShopAdvizorTests  is subclass of Tests

instance variables
   pedro : User := new User("Pedro",<Owner>,"pedro@gmail.com",925302024);
   joana : User := new User("Joana",<Common>,"joana@gmail.com",915302024);
   apple : Store := new Store(pedro,"Apple","Rua Ale Porto");
   microsoft : Store := new Store(pedro,"Microsoft","Rua Alo Lisboa");
   
operations
private testShopAdvizor: () ==> ()
			testShopAdvizor() ==
			(	   --verifies if an empty shopadvizor class has no users and no stores
			 
			  dcl shopadvizor : ShopAdvizor := new ShopAdvizor();
			
				assert(shopadvizor.getUsers() = {});
			  assert(shopadvizor.getStores() = {});
				
);

private testUsers : () ==> ()
testUsers() ==
(
		--creates an empty shopadvizor class, adds and removes two users and checks if it was done correctly
		dcl shopadvizor : ShopAdvizor := new ShopAdvizor();
		
		shopadvizor.addUser(pedro);
		assert(shopadvizor.getUsers() = {pedro});
		shopadvizor.addUser(joana);
		assert(shopadvizor.getUsers() = {pedro, joana});
		shopadvizor.removeUser(joana);
		assert(shopadvizor.getUsers() = {pedro});
		shopadvizor.removeUser(pedro);
		assert(shopadvizor.getUsers() = {});
		
);

private testStores : () ==> ()
testStores() ==
(
		--creates an empty shopadvizor class, adds and removes two stores checks if it was done correctly
		dcl shopadvizor : ShopAdvizor := new ShopAdvizor();
		
		shopadvizor.addStore(apple);
		assert(shopadvizor.getStores() = {apple});
		shopadvizor.addStore(microsoft);
		assert(shopadvizor.getStores() = {apple, microsoft});
		shopadvizor.removeStore(microsoft);
		assert(shopadvizor.getStores() = {apple});
		shopadvizor.removeStore(apple);
		assert(shopadvizor.getStores() = {});
		
);

--------------------------- TEST CASES WITH INVALID INPUTS ---------------------------

private testAddUsersInvalid : () ==> ()
testAddUsersInvalid() ==
(
		--creates an empty shopadvizor class and tries to add 2 user with the same username
		dcl shopadvizor : ShopAdvizor := new ShopAdvizor();
		
		shopadvizor.addUser(pedro);
		assert(shopadvizor.getUsers() = {pedro});
		shopadvizor.addUser(pedro);
		
		
);

private testRemoveUsersInvalid : () ==> ()
testRemoveUsersInvalid() ==
(
		--creates an empty shopadvizor class and tries to delete an non existent user
		dcl shopadvizor : ShopAdvizor := new ShopAdvizor();
		
		shopadvizor.removeUser(pedro);
);



private testStoresInvalid : () ==> ()
testStoresInvalid() ==
(
		--creates an empty shopadvizor class and tries to add 2 stores with the same name
		dcl shopadvizor : ShopAdvizor := new ShopAdvizor();
		
		shopadvizor.addStore(apple);
		shopadvizor.addStore(apple);
		
);


--runs the above tests
	public runTests: () ==> ()
		runTests() ==
		(
			testShopAdvizor();
			testUsers();
			testStores();
			--TEST CASES WITH INVALID INPUTS--
			--testAddUsersInvalid();
			--testRemoveUsersInvalid();
			--testStoresInvalid();
			
);
functions
-- TODO Define functiones here

end ShopAdvizorTests