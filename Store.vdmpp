class Store
types
public String = seq1 of char;
values
-- TODO Define values here
instance variables
	private StoreName: String;
	products: set of Product := {};
	public owner: User;

	--products: seq of Product;
	
operations
  public Store: User * String ==> Store
  Store(ownerS,sn) == (
		StoreName := sn;
		owner := ownerS;
	)
	
	pre ownerS.getType() = <Manager>;
	
	
	--Return all products from Store
	 pure public getProducts: () ==> set of Product
			getProducts() ==
			return products;
			
	--Return best rated product from Store
	    pure public getBestProduct: () ==> Product
			getBestProduct() ==  (
		(dcl best: rat := 0;
		 dcl bestProd: Product;
			for all prod in set products do(
			if prod.getRating() > best then(
				best := prod.getRating();
				  bestProd := prod
				)
			);
				return bestProd;
		)
	
    );
   
			
	--Add Products 
	public addProduct :Product * User ==> ()
		addProduct(p,u) == 
		products := products union {p}
		pre User`equals(u,self.owner) and not exists product in set products & Product`equals(product, p) 
		post p in set products;
	
functions
-- TODO Define functiones here

public equals : Store * Store -> bool
equals(store1, store2) ==
			store1.StoreName = store2.StoreName;
			
traces
-- TODO Define Combinatorial Test Traces here
end Store