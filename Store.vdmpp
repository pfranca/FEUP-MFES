class Store

types
public String = seq1 of char;

values
-- TODO Define values here
instance variables
	private StoreName: String;
	products: set of Product := {};
	managers: set of User := {};
	public owner: User;


	
operations
--Store constructor, initializes the store variables.
  public Store: User * String ==> Store
  Store(ownerS,sn) == (
  	owner := ownerS;
		StoreName := sn;
		managers := managers union {self.owner};
	)
	
	pre ownerS.getType() = <Owner>
	post self.owner in set managers;
	
	
	
	--Return name of the store
	 pure public getStoreName: () ==> String
			getStoreName() ==
			return self.StoreName;
			
			
	--Return all products from Store
	 pure public getProducts: () ==> set of Product
			getProducts() ==
			return products;
			
	--Return all managers from Store
	 pure public getManagers: () ==> set of User
			getManagers() ==
			return managers;
			
	--Return owner from Store
	 pure public getOwner: () ==> String
			getOwner() ==
			return self.owner.User`getUsername();
			
	--Return the best rated product from Store
	    pure public getBestProduct: () ==> Product
			getBestProduct() ==  (
		(dcl best: rat := 0;
		 dcl bestProd: Product;
			for all prod in set products do(
			if prod.getRating() > best then(
				best := prod.getRating();
				  bestProd := prod
				)
			);
				return bestProd;
		)
	    );
   
	
	--Add Products to Store
	public addProduct :Product * User ==> ()
		addProduct(p,u) == 
		products := products union {p}
		pre u in set managers and not exists product in set products & Product`equals(product, p) 
		post p in set products;
		

  --Add Managers to Store	
 	public addManager :User * User ==> ()
		addManager(m,o) == 
		managers := managers union {m}
			pre User`equals(o,self.owner) and not exists manager in set managers & User`equals(manager, m)
		post m in set managers;
	
functions
-- TODO Define functiones here

 --Verifies if two Stores are the same
public equals : Store * Store -> bool
equals(store1, store2) ==
			store1.StoreName = store2.StoreName;
			
traces
-- TODO Define Combinatorial Test Traces here
end Store