class Product

types
    public String = seq1 of char;
		public ProductName = String;
		public ProductPrice = nat1; 

		
instance variables
	/* Tip: variables are declared public to facilitate queries */
	reviews: set of Review := {};
	public name: ProductName;
	public price: ProductPrice;
	public rating : rat :=0;

	
 operations
 
  --Product constructor, initializes the product variables.
   public Product : ProductName * ProductPrice  ==> Product
	  Product(nameP, priceP) == (
		name := nameP;
		price := priceP;
		
	);
	
	
	--Returns name of Product
	  pure public getProductName: () ==> String
			getProductName() ==
			return name;
			
			--Returns price of Product
	  pure public getProductPrice: () ==> ProductPrice
			getProductPrice() ==
			return price;
	
	  --Adds review to Product 			
 	 public addReview :Review ==> ()
		addReview(r) ==  ( 
		--adds the new review to the Product
		reviews := reviews union {r};	
		--updates the product rating based on the new review rating
		(dcl aux: rat := 0;
			for all rev in set reviews do(
				aux := aux + rev.getRating()
			);
			aux := aux / card reviews;
			rating := aux
		);

		)
		post r in set reviews;
		
	  --Returns all reviews from Product
	  pure public getReviews: () ==> set of Review
			getReviews() ==	
			return reviews;	
			
		 --Returns rating of Product
	  pure public getRating: () ==> rat
			getRating() ==
			return rating;
			
			-- Returns review before specific Date
  pure public getReviewBeforeDate: Review`Date  ==> set of Review
    getReviewBeforeDate(d)  == (
      
		( dcl reviewBefore: set of Review :={};
			for all rev in set reviews do(
				if (rev.getReviewDate().year < d.year or(rev.getReviewDate().year =d.year and rev.getReviewDate().month < d.month) 
				or (rev.getReviewDate().year =d.year and rev.getReviewDate().month = d.month and rev.getReviewDate().day <d.day )) 
				then
				reviewBefore:= reviewBefore union {rev};
			);
			return reviewBefore
		);
    )
		pre reviews <> {};
		
				-- Returns review after specific Date
  pure public getReviewAfterDate: Review`Date  ==> set of Review
    getReviewAfterDate(d)  == (
      
		( dcl reviewAfter: set of Review :={};
			for all rev in set reviews do(
				if (rev.getReviewDate().year > d.year or(rev.getReviewDate().year =d.year and rev.getReviewDate().month > d.month) 
				or (rev.getReviewDate().year =d.year and rev.getReviewDate().month = d.month and rev.getReviewDate().day > d.day )) 
				then
				reviewAfter:= reviewAfter union {rev};
			);
			return reviewAfter
		);
    )
		pre reviews <> {};
		
				-- Returns review for a specific Date
  pure public getReviewOnDate: Review`Date  ==> set of Review
    getReviewOnDate(d)  == (
      
		( dcl reviewOn: set of Review :={};
			for all rev in set reviews do(
				if (rev.getReviewDate() = d) 
				then
				reviewOn:= reviewOn union {rev};
			);
			return reviewOn
		);
    )
		pre reviews <> {};
		
					
			
functions

 --Verifies if two products are the same
	public equals : Product * Product -> bool
		equals(product1, product2) ==
		product1.name = product2.name;

	
  
end Product 
