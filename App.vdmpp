/* Main class where all interactions will pass through.
*/

class App
types
-- TODO Define types here
values
-- TODO Define values here
instance variables
-- TODO Define instance variables here
      users: set of User := {};
      stores: set of Store := {};
      
operations

--Returns all the stores in ShopAdvizor
	pure public getStores: () ==> set of Store
		getStores()  ==
		return stores; 		
		
	public addStore :Store ==> ()
		addStore(s) == 
		stores := stores union {s}
			pre not exists store in set stores & Store`equals(store, s)
		post s in set stores;
		
	public removeStore : Store ==> ()
		removeStore(s) ==
		(
			for all store in set stores do
				if Store`equals(store, s) 
				then stores := stores \ {store};
		)
						pre exists store in set stores & Store`equals(store, s)
		post not exists store in set stores & Store`equals(store, s);
	

--Returns all the users in ShopAdvizor	
 	pure public getUsers: () ==> set of User
			getUsers() ==
			return users;
			
--Adds user to ShopAdvizor 			
 	public addUser :User ==> ()
		addUser(u) == 
		users := users union {u}
			pre not exists user in set users & User`equals(user, u)
		post u in set users;
		
--Removes user from ShopAdvizor				
	public removeUser : User ==> ()
		removeUser(u) ==
		(
			for all user in set users do
				if User`equals(user, u) 
				then users := users \ {user};
		)
						pre exists user in set users & User`equals(user, u)
		post not exists user in set users & User`equals(user, u);


functions
-- TODO Define functiones here
traces
-- TODO Define Combinatorial Test Traces here
end App